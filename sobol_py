import sys
import math

def sobol_points(N, D, dir_file):
    with open(dir_file, 'r') as infile:
        lines = infile.readlines()

    # L = max number of bits needed
    L = int(math.ceil(math.log(N, 2)))

    # C[i] = index from the right of the first zero bit of i
    C = [0] * N
    for i in range(N):
        C[i] = 1
        value = i
        while value & 1:
            value >>= 1
            C[i] += 1

    # POINTS[i][j] = the jth component of the ith point
    # with i indexed from 0 to N-1 and j indexed from 0 to D-1
    POINTS = [[0] * D for _ in range(N)]
    for j in range(D):
        POINTS[0][j] = 0

    # ----- Compute the first dimension -----

    # Compute direction numbers V[1] to V[L], scaled by pow(2,32)
    V = [0] * (L + 1)
    for i in range(1, L + 1):
        V[i] = 1 << (32 - i)  # all m's = 1

    # Evaluate X[0] to X[N-1], scaled by pow(2,32)
    X = [0] * N
    for i in range(1, N):
        X[i] = X[i - 1] ^ V[C[i - 1]]
        POINTS[i][0] = float(X[i]) / pow(2.0, 32)  # the actual points
        # ^ 0 for first dimension

    # ----- Compute the remaining dimensions -----
    for j in range(1, D):
        # Read in parameters from file
        d, s, a, *m = map(int, lines[j].split())

        # Compute direction numbers V[1] to V[L], scaled by pow(2,32)
        if L <= s:
            V = [m[i] << (32 - i) for i in range(1, L + 1)]
        else:
            V = [0] * (L + 1)
            for i in range(1, s + 1):
                V[i] = m[i] << (32 - i)
            for i in range(s + 1, L + 1):
                V[i] = V[i - s] ^ (V[i - s] >> s)
                for k in range(1, s):
                    V[i] ^= (((a >> (s - 1 - k)) & 1) * V[i - k])

        # Evaluate X[0] to X[N-1], scaled by pow(2,32)
        X = [0] * N
        for i in range(1, N):
            X[i] = X[i - 1] ^ V[C[i - 1]]
            POINTS[i][j] = float(X[i]) / pow(2.0, 32)  # the actual points
            # ^ j for dimension (j+1)

    return POINTS



def main(argv):
    if len(argv) != 4:
        print("\ninput format: sobol N D FILENAME\n")
        print("The program prints the first N sobol points in D dimensions.")
        print("The points are generated in graycode order.")
        print("The primitive polynomials and initial direction numbers are")
        print("given by the input file FILENAME.\n")
        return

    N = int(argv[1])
    D = int(argv[2])
    P = sobol_points(N, D, argv[3])

    # display points
    for i in range(N):
        for j in range(D):
            print("{:.20f} ".format(P[i][j]), end="")
        print("")
    print("")
